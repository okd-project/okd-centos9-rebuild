---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: create-github-release
  namespace: okd-team
spec:
  params:
    - description: The release name to target
      name: release-name
      type: string
    - description: The mirrored release pullspec to target
      name: mirrored-release-pullspec
      type: string
    - description: The Kubernetes secret containing a GitHub token
      name: github-token-secret-name
      type: string
      default: gh-token
    - description: The secret key name for the GitHub token
      name: github-token-secret-key
      type: string
      default: zzlotnik-gh-okd-token
    - description: The GPG key ID to sign the release
      name: gpg-key-id
      type: string
      default: okd@not.real.go.away
    - description: The Kube secret name containing the GPG signing key
      name: gpg-secret-name
      type: string
      default: release-signing-gpg-key
    - description: The Kube secret key containing the GPG signing key
      name: gpg-secret-key-name
      type: string
      default: fake-okd-signing-key.key
    - description: The GitHub org/repo to release to
      name: github-org-repo
      type: string
      default: cheesesashimi/okd-release-test
  steps:
    - image: "image-registry.openshift-image-registry.svc:5000/okd-team/tekton-worker:latest"
      name: "create-github-release"
      env:
        - name: RELEASE_NAME
          value: $(params.release-name)
        - name: MIRRORED_RELEASE_PULLSPEC
          value: $(params.mirrored-release-pullspec)
        - name: GH_TOKEN
          valueFrom:
            secretKeyRef:
              name: $(params.github-token-secret-name)
              key: $(params.github-token-secret-key)
      script: |
        #!/usr/bin/env bash
        set -euxo pipefail

        # Retrieve the release info, including the pullspecs
        release_pullspecs="$(oc adm release info --pullspecs "$MIRRORED_RELEASE_PULLSPEC")"

        # Load the release notes template from the ConfigMap
        release_notes_template="$(cat /var/release-notes-template/release-notes-template.txt)"

        # Substitute the template placeholder for the release info
        release_notes="${release_notes_template/release_pullspec/$release_pullspecs}"

        client_utils_dir="okd-scos-$RELEASE_NAME"

        # Download and extract the CLI tools from the release
        oc adm release extract \
            --command-os='*' \
            --tools \
            --to="$client_utils_dir" \
            "$MIRRORED_RELEASE_PULLSPEC"

        export GPG_TTY=$(tty)
        # Import our GPG key
        # Note: I couldn't get this to work by doing gpg --batch --imoprt for some reason.
        cat "/var/gpg-signing-key/$(params.gpg-secret-key-name)" | gpg --batch --import

        # Sign our release
        gpg --default-key "$(params.gpg-key-id)" --armor --detach-sign "$client_utils_dir/sha256sum.txt"
        # Verify that we've signed the release
        gpg --verify "$client_utils_dir/sha256sum.txt.asc" "$client_utils_dir/sha256sum.txt"

        cd "$client_utils_dir"

        # Create a new GitHub release and upload our assets
        # See: https://cli.github.com/ for details on the official GitHub CLI tool
        gh release create "$RELEASE_NAME" \
          --repo "$(params.github-org-repo)" \
          --notes "$release_notes" \
          ./*.tar.gz ./*.txt ./*.txt.asc
      volumeMounts:
        - name: release-notes-template
          mountPath: /var/release-notes-template
        - name: gpg-signing-key
          mountPath: /var/gpg-signing-key
  volumes:
    - name: release-notes-template
      configMap:
        name: release-notes-template
    - name: gpg-signing-key
      secret:
        secretName: $(params.gpg-secret-name)
